openapi: 3.0.3
info:
  title: Odoo Hackathon API
  version: 1.0.0
  description: API documentation for authentication, contact management, and tax management system.
servers:
  - url: http://localhost:8000
    description: Local server
paths:
  /api/v1/auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
            examples:
              default:
                value:
                  email: admin@example.com
                  password: StrongPass#123
                  username: admin
                  full_name: System Admin
                  role: admin
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /api/v1/auth/login:
    post:
      summary: Login user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            examples:
              default:
                value:
                  email: admin@example.com
                  password: StrongPass#123
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
  /api/v1/auth/refresh:
    post:
      summary: Refresh access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
            examples:
              default:
                value:
                  refresh_token: <REFRESH_TOKEN>
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid or expired refresh token
  /api/v1/auth/logout:
    post:
      summary: Logout by revoking a refresh token
      tags: [Authentication]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
            examples:
              default:
                value:
                  refresh_token: <REFRESH_TOKEN>
      responses:
        '204':
          description: No Content
  /api/v1/auth/logout-all:
    post:
      summary: Logout from all sessions
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '204':
          description: No Content
  /api/v1/auth/me:
    get:
      summary: Get current user profile
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithProfile'
        '401':
          description: Not authenticated
  /api/v1/auth/change-password:
    post:
      summary: Change current user's password
      tags: [Authentication]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
            examples:
              default:
                value:
                  current_password: OldPass#123
                  new_password: NewPass#123
                  confirm_password: NewPass#123
      responses:
        '204':
          description: No Content
        '400':
          description: Current password incorrect or validation error
  /api/v1/auth/sessions:
    get:
      summary: Get active sessions for current user
      tags: [Authentication]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSession'
        '401':
          description: Not authenticated
  /api/v1/auth/health:
    get:
      summary: Health check
      tags: [Authentication]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: authentication
  /api/v1/contacts:
    post:
      summary: Create a new contact
      tags: [Contacts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin, invoicing_user]
          required: true
          description: User role for authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactCreate'
            example:
              name: "Test Company"
              type: "customer"
              email: "company@test.com"
              mobile: "9876543210"
              address_city: "Mumbai"
              address_state: "Maharashtra"
              address_pincode: "400001"
      responses:
        '200':
          description: Contact created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactResponse'
        '403':
          description: Insufficient permissions or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    
    get:
      summary: Get all contacts
      tags: [Contacts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin, invoicing_user, contact_user]
          required: true
          description: User role for authorization
      responses:
        '200':
          description: List of contacts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactResponse'
        '403':
          description: Insufficient permissions or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/users:
    get:
      summary: List users (admin only)
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin]
          required: true
          description: Must be 'admin' and match the authenticated user's role
      responses:
        '200':
          description: List of users with profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithProfile'
        '401':
          description: Not authenticated
        '403':
          description: Only admin users can access this endpoint
  /api/v1/taxes:
    get:
      summary: Get all taxes
      tags: [Taxes]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin, invoicing_user]
          required: true
          description: User role for authorization
      responses:
        '200':
          description: List of taxes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxResponse'
        '403':
          description: Insufficient permissions or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new tax
      tags: [Taxes]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin, invoicing_user]
          required: true
          description: User role for authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxCreate'
            example:
              name: "GST"
              computation_method: "percentage"
              value: 18.0
              is_applicable_on_sales: true
              is_applicable_on_purchase: true
      responses:
        '201':
          description: Tax created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxResponse'
        '403':
          description: Insufficient permissions or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/taxes/{tax_id}:
    parameters:
      - name: tax_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The ID of the tax
    get:
      summary: Get a specific tax by ID
      tags: [Taxes]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin, invoicing_user]
          required: true
          description: User role for authorization
      responses:
        '200':
          description: Tax details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxResponse'
        '403':
          description: Insufficient permissions or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tax not found
    put:
      summary: Update a tax (admin only)
      tags: [Taxes]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin]
          required: true
          description: User role for authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxUpdate'
      responses:
        '200':
          description: Tax updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxResponse'
        '403':
          description: Insufficient permissions or invalid role
        '404':
          description: Tax not found
    delete:
      summary: Delete a tax (admin only)
      tags: [Taxes]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin]
          required: true
          description: User role for authorization
      responses:
        '204':
          description: No Content
  /api/v1/chart-of-accounts:
    get:
      summary: Get all chart of accounts
      tags: [ChartOfAccounts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin, invoicing_user]
          required: true
          description: User role for authorization
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponse'
        '403':
          description: Insufficient permissions or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new account
      tags: [ChartOfAccounts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin, invoicing_user]
          required: true
          description: User role for authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
            example:
              name: "Bank A/c"
              type: "asset"
      responses:
        '200':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '403':
          description: Insufficient permissions or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/chart-of-accounts/{id}:
    get:
      summary: Get a chart of account by ID
      tags: [ChartOfAccounts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin, invoicing_user]
          required: true
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '404':
          description: Not found
    put:
      summary: Update a chart of account (admin only)
      tags: [ChartOfAccounts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin]
          required: true
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '403':
          description: Insufficient permissions
    delete:
      summary: Delete a chart of account (admin only)
      tags: [ChartOfAccounts]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin]
          required: true
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No Content
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegister:
      type: object
      required: [email, password, username, role]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          maxLength: 128
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: '^[a-zA-Z0-9_-]+$'
        full_name:
          type: string
          maxLength: 100
          nullable: true
        role:
          type: string
          enum: [admin, invoicing_user, contact_user]
          default: contact_user
    UserLogin:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    TokenResponse:
      type: object
      required: [access_token, refresh_token, token_type, expires_in]
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          description: Access token lifetime in seconds
          example: 900
      example:
        access_token: <ACCESS_TOKEN>
        refresh_token: <REFRESH_TOKEN>
        token_type: bearer
        expires_in: 900
    TokenRefresh:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        username:
          type: string
        full_name:
          type: string
          nullable: true
        avatar_url:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    UserWithProfile:
      allOf:
        - type: object
          properties:
            email:
              type: string
              format: email
            role:
              type: string
              enum: [admin, invoicing_user, contact_user]
            id:
              type: string
              format: uuid
            is_active:
              type: boolean
        - type: object
          properties:
            profile:
              $ref: '#/components/schemas/UserProfile'
    PasswordChange:
      type: object
      required: [current_password, new_password, confirm_password]
      properties:
        current_password:
          type: string
        new_password:
          type: string
          minLength: 8
          maxLength: 128
        confirm_password:
          type: string
    TaxCreate:
      type: object
      required:
        - name
        - computation_method
        - value
      properties:
        name:
          type: string
          description: Name of the tax
        computation_method:
          type: string
          enum: [percentage, fixed]
          description: How the tax is computed
        value:
          type: number
          format: float
          description: Tax rate percentage or fixed amount
        is_applicable_on_sales:
          type: boolean
          default: true
          description: Whether this tax applies to sales
        is_applicable_on_purchase:
          type: boolean
          default: true
          description: Whether this tax applies to purchases

    TaxUpdate:
      type: object
      properties:
        name:
          type: string
          description: Name of the tax
        computation_method:
          type: string
          enum: [percentage, fixed]
          description: How the tax is computed
        value:
          type: number
          format: float
          description: Tax rate percentage or fixed amount
        is_applicable_on_sales:
          type: boolean
          description: Whether this tax applies to sales
        is_applicable_on_purchase:
          type: boolean
          description: Whether this tax applies to purchases

    TaxResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        computation_method:
          type: string
          enum: [percentage, fixed]
        value:
          type: number
          format: float
        is_applicable_on_sales:
          type: boolean
        is_applicable_on_purchase:
          type: boolean
        created_at:
          type: string
          format: date-time

  /api/v1/taxes/{tax_id}:
    parameters:
      - name: tax_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: The ID of the tax to operate on
    
    get:
      summary: Get a specific tax by ID
      tags: [Taxes]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin, invoicing_user]
          required: true
          description: User role for authorization
      responses:
        '200':
          description: Tax details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxResponse'
        '403':
          description: Insufficient permissions or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tax not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update a tax
      tags: [Taxes]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin]
          required: true
          description: User role for authorization (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaxUpdate'
            example:
              name: "Updated GST"
              value: 12.0
              is_applicable_on_sales: true
      responses:
        '200':
          description: Tax updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxResponse'
        '403':
          description: Insufficient permissions or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tax not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    
    delete:
      summary: Delete a tax
      tags: [Taxes]
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: X-User-Role
          schema:
            type: string
            enum: [admin]
          required: true
          description: User role for authorization (admin only)
      responses:
        '204':
          description: Tax deleted successfully
        '403':
          description: Insufficient permissions or invalid role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Tax not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    UserSession:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_agent:
          type: string
          nullable: true
        ip_address:
          type: string
          nullable: true
        is_active:
          type: boolean
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    ContactCreate:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: "Test Company"
        type:
          type: string
          enum: [customer, vendor, both]
          example: "customer"
        email:
          type: string
          format: email
          example: "company@test.com"
        mobile:
          type: string
          example: "9876543210"
        address_city:
          type: string
          example: "Mumbai"
        address_state:
          type: string
          example: "Maharashtra"
        address_pincode:
          type: string
          example: "400001"
    ContactResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Test Company"
        type:
          type: string
          enum: [customer, vendor, both]
          example: "customer"
        email:
          type: string
          format: email
          example: "company@test.com"
        mobile:
          type: string
          example: "9876543210"
        address_city:
          type: string
          example: "Mumbai"
        address_state:
          type: string
          example: "Maharashtra"
        address_pincode:
          type: string
          example: "400001"
        user_id:
          type: string
          format: uuid
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        detail:
          type: string
          example: "Insufficient permissions"
    ValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            type: object
            properties:
              loc:
                type: array
                items:
                  type: string
              msg:
                type: string
              type:
                type: string
    AccountCreate:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [asset, liability, expense, income, equity]
    AccountUpdate:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [asset, liability, expense, income, equity]
    AccountResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: [asset, liability, expense, income, equity]
        created_at:
          type: string
          format: date-time
        is_active:
          type: boolean
